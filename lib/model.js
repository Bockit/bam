// Generated by CoffeeScript 1.6.3
(function() {
  var $, Backbone, Decoratable, Model, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  _ = require('underscore');

  $ = require('jquery-browserify');

  Decoratable = require('./decoratable.js');

  Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      _ref = Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    Inline functionality to mixin classes
    
    `@::mixin(ClassName)` is how you do it.
    */


    Model.prototype.mixin = function(Class) {
      var key, value, _ref1, _results;
      _ref1 = Class.prototype;
      _results = [];
      for (key in _ref1) {
        value = _ref1[key];
        _results.push(this[key] = value);
      }
      return _results;
    };

    Model.prototype.mixin(Decoratable);

    /*
    Returns the model after this model in its collection. If it's not in a
    collection this will return null.
    */


    Model.prototype.next = function() {
      var _ref1;
      return (_ref1 = this.collection) != null ? _ref1.after(this) : void 0;
    };

    /*
    Returns the model before this model in its collection. If it's not in a
    collection this will return null.
    */


    Model.prototype.prev = function() {
      var _ref1;
      return (_ref1 = this.collection) != null ? _ref1.before(this) : void 0;
    };

    return Model;

  })(Backbone.Model);

  module.exports = Model;

}).call(this);
