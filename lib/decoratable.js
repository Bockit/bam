// Generated by CoffeeScript 1.6.3
(function() {
  var Decoratable, _,
    __slice = [].slice;

  _ = require('underscore');

  Decoratable = (function() {
    function Decoratable() {}

    /*
    Wraps methods in functions specified in the arguments. Takes the format:
    
        {
            'hello': 'world'
            'foo': bar
            'render': ['depends', 'idle']
            'setup': [_.partial, 'stuff']
        }
    
    'hello': 'world' - Looks for method this.hello and wraps it in
    this.world if this.world exists.
    
    'foo': bar - Wraps this.foo in function bar
    
    'render': ['depends', 'idle'] - Wraps method this.render in this.depends
    and passes 'idle' to the wrapping function. Any arguments after the
    first are passed into the wrapping function.
    
    'setup': [_.partial, 'stuff'] - Wraps method this.setup in _.partial, and
    passes 'stuff' to the wrapping function. Any arguments after the first
    are passed into the wrapping function.
    */


    Decoratable.prototype.decorateMethods = function(decorators) {
      var args, decorator, func, key, name, value, _results;
      if (decorators == null) {
        decorators = {};
      }
      _results = [];
      for (key in decorators) {
        value = decorators[key];
        func = this[key];
        args = [];
        if (_.isString(value)) {
          decorator = this[value];
        } else if (_.isFunction(value)) {
          decorator = value;
        } else if (_.isArray(value)) {
          if (_.isString(value[0])) {
            name = value[0], args = 2 <= value.length ? __slice.call(value, 1) : [];
            decorator = this[name];
          } else if (_.isFunction(value[0])) {
            decorator = value[0], args = 2 <= value.length ? __slice.call(value, 1) : [];
          }
        }
        args = [func].concat(args);
        _results.push(this[key] = decorator.apply(this, args));
      }
      return _results;
    };

    return Decoratable;

  })();

  module.exports = Decoratable;

}).call(this);
