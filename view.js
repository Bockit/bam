// Generated by CoffeeScript 1.6.3
(function() {
  var Backbone, View, difference, without, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Backbone = require('backbone');

  _ref = require('underscore'), without = _ref.without, difference = _ref.difference;

  View = (function(_super) {
    __extends(View, _super);

    View.prototype.parent = null;

    View.prototype.children = null;

    View.prototype.namespace = '';

    /*
    Ensure the classname is applied, then set the parent and children if any
    are passed in. Does the normal backbone constructor and then does the
    first state change.
    */


    function View(options) {
      var _ref1;
      this.children = [];
      if (options.className) {
        this.className = options.className;
      }
      if (options.namespace) {
        this.namespace = options.namespace;
      }
      if (options.el) {
        this._ensureClass(options.el);
      }
      if (options.parent) {
        this.setParent(options.parent);
      }
      if ((_ref1 = options.children) != null ? _ref1.length : void 0) {
        this.addChildren(options.children);
      }
      View.__super__.constructor.call(this, options);
    }

    /*
    Used to ensure that the className property of the view is applied to an
    el passed in as an option.
    */


    View.prototype._ensureClass = function(el, className) {
      if (className == null) {
        className = this.className;
      }
      return Backbone.$(el).addClass(className);
    };

    /*
    Adds a list of views as children of this view.
    */


    View.prototype.addChildren = function(views) {
      var view, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        view = views[_i];
        _results.push(this.addChild(view));
      }
      return _results;
    };

    /*
    Adds a view as a child of this view.
    */


    View.prototype.addChild = function(view) {
      this.children.push(view);
      return this.trigger('child:add', {
        view: view
      });
    };

    /*
    Sets the parent element of the view.
    */


    View.prototype.setParent = function(parent) {
      var _ref1;
      this.parent = parent;
      this.trigger('parent:set', {
        parent: parent
      });
      return (_ref1 = this.parent) != null ? _ref1.addChild(this) : void 0;
    };

    /*
    Parent and Child accessors.
    */


    View.prototype.hasParent = function() {
      return !!this.parent;
    };

    View.prototype.getParent = function() {
      return this.parent;
    };

    View.prototype.hasChildren = function() {
      return this.children.length;
    };

    View.prototype.getChildren = function() {
      return this.children;
    };

    View.prototype.removeChild = function(child) {
      this.children = without(this.children, child);
      return child.setParent(null);
    };

    View.prototype.removeChildren = function(children) {
      var child, _i, _len, _ref1, _results;
      _ref1 = this.children;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        child = _ref1[_i];
        _results.push(this.removeChild(child));
      }
      return _results;
    };

    /*
    Gets the root view for a particular view. Can be itself.
    */


    View.prototype.root = function() {
      var root;
      root = this;
      while (root.hasParent()) {
        root = root.getParent();
      }
      return root;
    };

    /*
    Calls remove on all child views before removing itself
    */


    View.prototype.remove = function() {
      this.children.forEach(function(child) {
        return child.remove();
      });
      this.children = [];
      this.parent = null;
      this.off();
      this.undelegateEvents();
      return View.__super__.remove.call(this);
    };

    /*
    Calls trigger on the root() object with the namespace added, and also on
    itself without the namespace.
    */


    View.prototype.trigger = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Backbone.View.prototype.trigger.apply(this, args);
      if (this.namespace) {
        args[0] = this.namespace + '.' + args[0];
      }
      if (this.parent) {
        return this.parent.trigger.apply(this.parent, args);
      }
    };

    return View;

  })(Backbone.View);

  module.exports = View;

}).call(this);
